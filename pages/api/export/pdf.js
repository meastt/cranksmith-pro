// pages/api/export/pdf.js
export default async function handler(req, res) {
    if (req.method !== 'POST') {
      return res.status(405).json({ error: 'Method not allowed' });
    }
  
    try {
      const { customer, shop, components, buildData, timestamp } = req.body;
  
      // For now, return a simple PDF-like response
      // In production, you'd use a library like puppeteer or jsPDF
      const pdfContent = generatePDFContent(customer, shop, components, buildData, timestamp);
      
      // Return as text for now - in production this would be actual PDF binary
      res.setHeader('Content-Type', 'application/pdf');
      res.setHeader('Content-Disposition', `attachment; filename="build-sheet-${customer.name || 'customer'}.pdf"`);
      
      // Mock PDF response - replace with actual PDF generation
      const mockPdfBuffer = Buffer.from(pdfContent, 'utf8');
      res.send(mockPdfBuffer);
      
    } catch (error) {
      console.error('PDF generation error:', error);
      res.status(500).json({ error: 'Failed to generate PDF' });
    }
  }
  
  function generatePDFContent(customer, shop, components, buildData, timestamp) {
    return `
  PROFESSIONAL DRIVETRAIN BUILD SHEET
  Generated: ${new Date(timestamp).toLocaleString()}
  
  SHOP INFORMATION:
  ${shop.name}
  ${shop.address}
  ${shop.phone}
  ${shop.email}
  
  CUSTOMER INFORMATION:
  Name: ${customer.name}
  Email: ${customer.email}
  Phone: ${customer.phone}
  Bike: ${customer.bikeModel}
  
  COMPONENT SPECIFICATION:
  Crankset: ${components.crankset.model} ${components.crankset.variant}
  Cassette: ${components.cassette.model} ${components.cassette.variant}
  Derailleur: ${components.derailleur.model} ${components.derailleur.variant}
  
  BUILD SUMMARY:
  Total Weight: ${buildData.totalWeight}g
  Gear Range: ${buildData.gearRange}
  Chain Length: ${buildData.chainLength} links
  Labor Estimate: ${buildData.laborTime}
  
  COMPLETE PARTS LIST:
  ${buildData.partsList.map(p => 
    `${p.name} - ${p.partNumber} - ${p.quantity} - ${p.weight} - ${p.notes}`
  ).join('\n')}
  
  INSTALLATION STEPS:
  ${buildData.installationSteps.map((step, i) => 
    `${i + 1}. ${step.title}\n   ${step.description}${step.torque ? `\n   Torque: ${step.torque}` : ''}${step.specialTools ? `\n   Tools: ${step.specialTools}` : ''}`
  ).join('\n\n')}
  
  ${buildData.warnings.length > 0 ? `
  WARNINGS:
  ${buildData.warnings.map(w => `â€¢ ${w}`).join('\n')}
  ` : ''}
  
  Generated by CrankSmith Pro - Professional Drivetrain Analysis
    `;
  }